#!/usr/bin/env python3
"""Accepts alerting information from Munin on the command line and forwards the
alerts to root.

The expected call format from Munin is

    mail-munin-alerts <hostname> <plugin name> \
            [<list of alert fields>] [<list of field values>]

The list of warnings/criticals allows filtering of unhelpful messages such as
those only containing OKs or UNKNOWNs. The list of fields must be in the same
order as the list of fields.
"""
import argparse
from sys import argv
from sys import stdin
from syslog import syslog

from ocflib.misc.mail import MAIL_ROOT
from ocflib.misc.mail import send_mail


MAIL_FROM = 'Munin <munin@ocf.berkeley.edu>'
MUNIN_HOSTS_URL = 'http://munin.ocf.berkeley.edu/ocf.berkeley.edu'


# Filter out uninteresting or noisy warnings at the individual level
IGNORED_WARNINGS = {
    'avgwrwait',
    'avgrdwait',
}


# Enumerate uninteresting discrete values (e.g. exit codes)
IGNORED_VALUES = {
    'smartctl_exit_status': {32, 64, 96, 128, 160, 192, 224},
}


def send_alert(host, plugin, mail_to=MAIL_ROOT):
    subject = 'Munin alert for {}'.format(host)
    body = ''.join(stdin)
    body += '\nSee graph at {}/{}/{}.html'.format(MUNIN_HOSTS_URL, host, plugin)
    send_mail(mail_to, subject, body, MAIL_FROM)


def main(argv):
    parser = argparse.ArgumentParser(description='Mail out a munin alert.')
    parser.add_argument('--mail-to', default=MAIL_ROOT)
    parser.add_argument('host')
    parser.add_argument('plugin')
    parser.add_argument('fields', nargs='*')
    args = parser.parse_args(argv[1:])

    mail_to = args.mail_to
    host, plugin = args.host, args.plugin

    try:
        num_fields = len(args.fields) // 2
        fields = dict(zip(args.fields[:num_fields], args.fields[num_fields:]))
        if not all(field in IGNORED_WARNINGS or
                   float(value) in IGNORED_VALUES.get(field, ())
                   for field, value in fields.items()):
            syslog('sending alert with args {}'.format(argv))
            send_alert(host, plugin, mail_to)
    except Exception as ex:
        syslog("caught exception '{}' with args {}".format(ex, argv))
        raise ex


if __name__ == '__main__':
    main(argv)
