#!/usr/bin/env python3

import fnmatch
import logging
import os
import psutil
import re
import time
from textwrap import dedent
from traceback import format_exc

from ocflib.account.utils import web_dir
from ocflib.misc.mail import send_problem_report

FCGI_REGEX = re.compile('.+\.fcgi$')
ATTRS = ('pid', 'username', 'cwd', 'cmdline')
LOG_FILE = '/var/log/apache2/fcgi-restarter.log'


def set_up_logger(logger):
    file_logger = logging.FileHandler(LOG_FILE)
    console_logger = logging.StreamHandler()

    formatter = logging.Formatter('%(asctime)s - %(name)s - %(message)s')
    file_logger.setFormatter(formatter)
    console_logger.setFormatter(formatter)

    logger.addHandler(file_logger)
    logger.addHandler(console_logger)
    logger.setLevel(logging.DEBUG)


def find_fcgi_files(filename, username, cwd):
    """
    Find any matching files that are in the web directory of the user that
    might match the filename specified. If the current working directory (cwd)
    of the fcgi process is already in the web directory, then use that as a
    starting point, since it is likely where the file will be located and
    allows us to distinguish between multiple fcgi files that might have the
    same name in a user's web directory.
    """
    if cwd.startswith(web_dir(username)):
        search_dir = cwd
    else:
        search_dir = web_dir(username)

    # Switch to glob.glob with recursive=True once on Python 3.5 (stretch):
    # return glob.glob('{}/**/{}'.format(search_dir, filename), recursive=True)
    paths = []
    for root, dirnames, filenames in os.walk(search_dir):
        [paths.append(os.path.join(root, f)) for f in fnmatch.filter(filenames, filename)]
    return paths


def max_last_modified_time(paths):
    """
    Takes in a list of file paths, and returns the most recent modification
    time of any of the files given
    """
    modify_times = []
    for path in paths:
        try:
            modify_times.append(os.path.getmtime(path))
        except FileNotFoundError:
            pass

    if modify_times:
        return max(modify_times)


def clean_up_old_pids(fcgi_processes, current_pids):
    """
    Clean up old PIDs from fcgi_processes when old processes exit, whether they
    are killed by this service or by apache2
    """
    dead_processes = set(fcgi_processes.keys()).difference(current_pids)
    current_pids.clear()

    if dead_processes:
        logger.info("Dead processes since last iteration, removing: {}".format(dead_processes))

        for pid in dead_processes:
            del fcgi_processes[pid]


def loop(fcgi_processes, current_pids, logger):
    # TODO: Switch to using the attrs filter for process_iter after psutil
    # version 5.3 is installed (likely buster, or maybe stretch-backports)
    for process in psutil.process_iter():
        try:
            pinfo = process.as_dict(ATTRS, ad_value='')
        except psutil.NoSuchProcess:
            continue

        # We don't care about any processes running as root or www-data and
        # shouldn't be touching them anyway
        if pinfo['username'] in ['root', 'www-data']:
            continue

        pid = pinfo['pid']

        # Only find processes that have ".fcgi" in their command
        matches = [FCGI_REGEX.match(elem) for elem in pinfo['cmdline']]
        if any(matches):
            filename = [match for match in matches if match][0].group(0)
            assert(filename.endswith('.fcgi'))

            current_pids.add(pid)
            if pid not in fcgi_processes:
                fcgi_processes[pid] = {'paths': find_fcgi_files(filename, pinfo['username'], pinfo['cwd'])}

            last_modified_time = max_last_modified_time(fcgi_processes[pid]['paths'])

            # If no modified time is detected, we can't monitor anything here
            if not last_modified_time:
                del fcgi_processes[pid]
                continue

            if 'time' not in fcgi_processes[pid]:
                fcgi_processes[pid]['time'] = last_modified_time

            # Kill off fcgi script since it has been modified (or touched)
            # more recently than the previously detected modification time
            if last_modified_time > fcgi_processes[pid]['time']:
                logger.warn(
                    'Killing off {}, owned by user {} from refresh on {}'.format(
                        pid,
                        pinfo['username'],
                        fcgi_processes[pid]['paths'],
                    )
                )
                process.terminate()


if __name__ == '__main__':
    try:
        # This is used to persist data between iterations to keep track of the
        # processes and files that should be watched
        fcgi_processes = {}

        # This is used so that any processes that die naturally are removed
        # properly from the fcgi_processes dictionary
        current_pids = set()

        logger = logging.getLogger('fcgi-restarter')
        set_up_logger(logger)

        while True:
            loop(fcgi_processes, current_pids, logger)
            clean_up_old_pids(fcgi_processes, current_pids)
            logger.debug(fcgi_processes)
            time.sleep(3)

    except Exception:
        msg = dedent("""\
            fcgi-restarter encountered the following error:
            {traceback}
        """).format(traceback=format_exc())

        send_problem_report(msg)
