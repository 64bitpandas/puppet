#!/usr/bin/env python3
import os.path
import shutil
import subprocess
import sys
import tempfile

import jinja2
from ocflib.account.search import SORRIED_SHELL
from ocflib.infra.ldap import ldap_ocf
from ocflib.infra.ldap import OCF_LDAP_PEOPLE

CONFIG_PATH = '/etc/php/7.0/fpm/pool.d/ocf-pools.conf'


jinja_env = jinja2.Environment(
    loader=jinja2.FileSystemLoader((
        os.path.abspath(os.path.dirname(__file__)),
        '/opt/share',
    )),
)


def test_and_overwrite_config(config_path, new_config):
    """Diffs and tests the new config and overwrites the old config if
    the test passes.

    Returns whether the old config was overwritten.
    """
    config_path_exists = os.path.isfile(config_path)

    (_, new_path), (__, old_path) = (
        tempfile.mkstemp(
            # Prefix with '.' so temp files don't get included
            prefix='.' + os.path.basename(config_path),
            dir=os.path.dirname(config_path),
        )
        for i in range(2)
    )

    try:
        os.chmod(new_path, 0o644)
        with open(new_path, 'w') as f:
            f.write(new_config)
        print('Wrote to ' + new_path)

        if config_path_exists:
            print('Files differ')

            # Save existing config
            shutil.copyfile(config_path, old_path)
            print('Copied existing config to ' + old_path)

        # Overwrite with new config and test
        os.rename(new_path, config_path)

        print('Performing config test.')
        ret = subprocess.call(('php-fpm7.0', '--test'))

        if ret != 0:
            print('Test failed!')
            if config_path_exists:
                print('Replacing with old config.')
                os.rename(old_path, config_path)
    finally:
        for p in old_path, new_path:
            try:
                os.remove(p)
            except FileNotFoundError:
                pass


def main():
    template = jinja_env.get_template('php-fpm-pool.jinja')
    with open('/opt/share/php-users.txt') as f:
        users = [line.strip() for line in f]

    #with ldap_ocf() as c:
    #    c.search(
    #        OCF_LDAP_PEOPLE,
    #        '(&(uid=*)(!(loginShell={})))'.format(SORRIED_SHELL),
    #        #'(uid=*)'.format(SORRIED_SHELL),
    #        attributes=['uid'],
    #    )
    #    users = [entry['attributes']['uid'][0] for entry in c.response]

    print("{} users".format(len(users)))

    new_config = '\n\n'.join(
        template.render(user=user)
        for user in sorted(users)
    )

    changed = test_and_overwrite_config(CONFIG_PATH, new_config)
    if changed:
        print('Things changed, reloading.')
        subprocess.check_call(('systemctl', 'reload', 'php7.0-fpm'))
    else:
        print('Nothing changed, not doing anything.')

if __name__ == '__main__':
    sys.exit(main())
