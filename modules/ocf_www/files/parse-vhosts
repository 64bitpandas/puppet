#!/usr/bin/env python3
"""Dump a list of virtual host information in JSON.

The purpose of the JSON is so that a simple Ruby fact can execute this script
and parse the JSON into a custom Facter fact, made available in Puppet.

Unfortunately Facter requires structured facts to be written in Ruby.
"""
import json
import os.path
from pathlib import Path

from ocflib.account.utils import get_vhosts
from ocflib.account.utils import web_dir


LETS_ENCRYPT_SSL = Path('/services/http/ssl')


def vhosts():
    for domain, vhost in get_vhosts().items():
        lets_encrypt_cert = LETS_ENCRYPT_SSL / (domain + '.crt')
        is_lets_encrypt = lets_encrypt_cert.exists()
        use_ssl = 'ssl' in vhost['flags'] or is_lets_encrypt

        if is_lets_encrypt:
            ssl_options = {
                'ssl_key': '/etc/ssl/lets-encrypt/le-vhost.key',
                'ssl_cert': str(lets_encrypt_cert),
                'ssl_chain': '/etc/ssl/certs/lets-encrypt.crt',
            }
        else:
            ssl_options = {
                'ssl_key': '/etc/ssl/private/vhosts/{}.key'.format(domain),
                'ssl_cert': '/etc/ssl/private/vhosts/{}.crt'.format(domain),
                'ssl_chain': '/etc/ssl/private/vhosts/{}.chain'.format(domain),
            }

        yield dict(
            {
                # Some of these are hard to calculate in Puppet's limited
                # DSL, so we do them here even though they're redundant.
                'domain': domain,
                'web_dir': web_dir(vhost['username']),
                'use_ssl': use_ssl,
                'use_hsts': 'hsts' in vhost['flags'],
                'full_docroot': os.path.join(
                    web_dir(vhost['username']),
                    vhost['docroot'].lstrip('/'),
                ),
                # If it's an HTTPS site, we need to add an HTTP alias for the main domain.
                'http_aliases': vhost['aliases'] + ([domain] if use_ssl else []),
                # TODO: adjust ocflib to just provide this now that we
                # don't need the full Apache string
                'redirect_dest': None if not vhost['redirect'] else vhost['redirect'].split()[1],
            },
            **dict(ssl_options, **vhost)
        )


if __name__ == '__main__':
    print(json.dumps(list(vhosts()), indent=True))
